(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{174:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),i=(a(0),a(298)),c={id:"dev-tools-java",title:"laksaj - java sdk",keywords:["sdk","java","laksaj","installation","apis","exmample","zilliqa"],description:"Zilliqa Java SDK LaksaJ"},l={id:"dev/dev-tools-java",isDocsHomePage:!1,title:"laksaj - java sdk",description:"Zilliqa Java SDK LaksaJ",source:"@site/docs/dev/dev-tools-java.md",permalink:"/docs/dev/dev-tools-java",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/dev/dev-tools-java.md",sidebar:"DevelopersSidebar",previous:{title:"gozilliqa",permalink:"/docs/dev/dev-tools-gozilliqa"},next:{title:"Other SDKs",permalink:"/docs/dev/dev-tools-sdks"}},o=[{value:"Source Code",id:"source-code",children:[]},{value:"Getting Started (Installation and Packages Explained)",id:"getting-started-installation-and-packages-explained",children:[]},{value:"Maven",id:"maven",children:[]},{value:"Gradle",id:"gradle",children:[]},{value:"Manually Build the Jar File",id:"manually-build-the-jar-file",children:[]},{value:"Methods and APIs",id:"methods-and-apis",children:[{value:"Account API",id:"account-api",children:[]},{value:"Wallet API",id:"wallet-api",children:[]},{value:"TransactionFactory Transaction",id:"transactionfactory-transaction",children:[]},{value:"ContractFactory Contract",id:"contractfactory-contract",children:[]},{value:"Crypto API",id:"crypto-api",children:[]},{value:"JSON-RPC API",id:"json-rpc-api",children:[]},{value:"Validation",id:"validation",children:[]},{value:"Util",id:"util",children:[]}]},{value:"Demo",id:"demo",children:[{value:"Generate Large Amount of Addresses",id:"generate-large-amount-of-addresses",children:[]},{value:"Validate an Address",id:"validate-an-address",children:[]},{value:"Validate Checksum Address",id:"validate-checksum-address",children:[]},{value:"Transaction Operations (Construct a Transaction, Calculate Transaction Fee, Do Serialization, Sign a Transaction, Broadcast)",id:"transaction-operations-construct-a-transaction-calculate-transaction-fee-do-serialization-sign-a-transaction-broadcast",children:[]},{value:"Know a Smart Contract Deposit",id:"know-a-smart-contract-deposit",children:[]}]}],s={rightToc:o};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("hr",null),Object(i.b)("h2",{id:"source-code"},"Source Code"),Object(i.b)("p",null,"The Github repository can be found at ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/FireStack-Lab/LaksaJ"}),"https://github.com/FireStack-Lab/LaksaJ")),Object(i.b)("h2",{id:"getting-started-installation-and-packages-explained"},"Getting Started (Installation and Packages Explained)"),Object(i.b)("p",null,"You can get start with the installation by using Maven, Gradle or manually building the ",Object(i.b)("inlineCode",{parentName:"p"},"jar")," file."),Object(i.b)("h2",{id:"maven"},"Maven"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n  <groupId>org.firestack</groupId>\n  <artifactId>laksaj</artifactId>\n  <version>1.0.5-RELEASE</version>\n</dependency>\n")),Object(i.b)("h2",{id:"gradle"},"Gradle"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-groovy"}),"\ndependencies {\n    compile group: 'org.firestack', name: 'laksaj', version: '1.0.5-RELEASE'\n}\n\n")),Object(i.b)("h2",{id:"manually-build-the-jar-file"},"Manually Build the Jar File"),Object(i.b)("p",null,"First clone the ",Object(i.b)("inlineCode",{parentName:"p"},"laksaj")," repository"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/FireStack-Lab/LaksaJ.git\n")),Object(i.b)("p",null,"Next, build ",Object(i.b)("inlineCode",{parentName:"p"},"jar")," using following command"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"gradle build -x test\n")),Object(i.b)("h2",{id:"methods-and-apis"},"Methods and APIs"),Object(i.b)("h3",{id:"account-api"},"Account API"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"fromFile"),Object(i.b)("li",{parentName:"ul"},"toFile")),Object(i.b)("h3",{id:"wallet-api"},"Wallet API"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"createAccount"),Object(i.b)("li",{parentName:"ul"},"addByPrivateKey addByKeyStore"),Object(i.b)("li",{parentName:"ul"},"remove"),Object(i.b)("li",{parentName:"ul"},"setDefault"),Object(i.b)("li",{parentName:"ul"},"signTransaction (default account)"),Object(i.b)("li",{parentName:"ul"},"signTransactionWith (specific account)")),Object(i.b)("h3",{id:"transactionfactory-transaction"},"TransactionFactory Transaction"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"sendTransaction"),Object(i.b)("li",{parentName:"ul"},"trackTx"),Object(i.b)("li",{parentName:"ul"},"confirm"),Object(i.b)("li",{parentName:"ul"},"isPending isInitialised isConfirmed isRejected")),Object(i.b)("h3",{id:"contractfactory-contract"},"ContractFactory Contract"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"deploy"),Object(i.b)("li",{parentName:"ul"},"call"),Object(i.b)("li",{parentName:"ul"},"isInitialised isDeployed isRejected"),Object(i.b)("li",{parentName:"ul"},"getState"),Object(i.b)("li",{parentName:"ul"},"getAddressForContract")),Object(i.b)("h3",{id:"crypto-api"},"Crypto API"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"getDerivedKey (PBKDF2 and Scrypt)"),Object(i.b)("li",{parentName:"ul"},"generatePrivateKey"),Object(i.b)("li",{parentName:"ul"},"Schnorr.sign"),Object(i.b)("li",{parentName:"ul"},"Schnorr.verify"),Object(i.b)("li",{parentName:"ul"},"getPublicKeyFromPrivateKey"),Object(i.b)("li",{parentName:"ul"},"getPublicKeyFromPrivateKey"),Object(i.b)("li",{parentName:"ul"},"getAddressFromPublicKey"),Object(i.b)("li",{parentName:"ul"},"getAddressFromPrivateKey"),Object(i.b)("li",{parentName:"ul"},"encryptPrivateKey"),Object(i.b)("li",{parentName:"ul"},"decryptPrivateKey")),Object(i.b)("h3",{id:"json-rpc-api"},"JSON-RPC API"),Object(i.b)("h4",{id:"blockchain-related-methods"},"Blockchain-Related Methods"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"getNetworkId"),Object(i.b)("li",{parentName:"ul"},"getBlockchainInfo"),Object(i.b)("li",{parentName:"ul"},"getShardingStructure"),Object(i.b)("li",{parentName:"ul"},"getDsBlock"),Object(i.b)("li",{parentName:"ul"},"getLatestDsBlock"),Object(i.b)("li",{parentName:"ul"},"getNumDSBlocks"),Object(i.b)("li",{parentName:"ul"},"getDSBlockRate"),Object(i.b)("li",{parentName:"ul"},"getDSBlockListing"),Object(i.b)("li",{parentName:"ul"},"getTxBlock"),Object(i.b)("li",{parentName:"ul"},"getLatestTxBlock"),Object(i.b)("li",{parentName:"ul"},"getNumTxBlocks"),Object(i.b)("li",{parentName:"ul"},"getTxBlockRate"),Object(i.b)("li",{parentName:"ul"},"getTxBlockListing"),Object(i.b)("li",{parentName:"ul"},"getNumTransactions"),Object(i.b)("li",{parentName:"ul"},"getTransactionRate"),Object(i.b)("li",{parentName:"ul"},"getCurrentMiniEpoch"),Object(i.b)("li",{parentName:"ul"},"getCurrentDSEpoch"),Object(i.b)("li",{parentName:"ul"},"getPrevDifficulty"),Object(i.b)("li",{parentName:"ul"},"getPrevDSDifficulty")),Object(i.b)("h4",{id:"transaction-related-methods"},"Transaction-Related Methods"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"createTransaction"),Object(i.b)("li",{parentName:"ul"},"getTransaction"),Object(i.b)("li",{parentName:"ul"},"getRecentTransactions"),Object(i.b)("li",{parentName:"ul"},"getTransactionsForTxBlock"),Object(i.b)("li",{parentName:"ul"},"getNumTxnsTxEpoch"),Object(i.b)("li",{parentName:"ul"},"getNumTxnsDSEpoch"),Object(i.b)("li",{parentName:"ul"},"getMinimumGasPrice")),Object(i.b)("h4",{id:"contract-related-methods"},"Contract-Related Methods"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"getSmartContractCode"),Object(i.b)("li",{parentName:"ul"},"getSmartContractInit"),Object(i.b)("li",{parentName:"ul"},"getSmartContractState"),Object(i.b)("li",{parentName:"ul"},"getSmartContracts"),Object(i.b)("li",{parentName:"ul"},"getContractAddressFromTransactionID")),Object(i.b)("h4",{id:"account-related-methods"},"Account-Related Methods"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"getBalance")),Object(i.b)("h3",{id:"validation"},"Validation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"isAddress"),Object(i.b)("li",{parentName:"ul"},"isPublicjKey"),Object(i.b)("li",{parentName:"ul"},"isPrivateKey"),Object(i.b)("li",{parentName:"ul"},"isSignature")),Object(i.b)("h3",{id:"util"},"Util"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"byteArrayToHexString"),Object(i.b)("li",{parentName:"ul"},"hexStringToByteArray"),Object(i.b)("li",{parentName:"ul"},"generateMac"),Object(i.b)("li",{parentName:"ul"},"isByteString"),Object(i.b)("li",{parentName:"ul"},"encodeTransactionProto"),Object(i.b)("li",{parentName:"ul"},"toChecksumAddress"),Object(i.b)("li",{parentName:"ul"},"isValidChecksumAddress"),Object(i.b)("li",{parentName:"ul"},"base58.encode"),Object(i.b)("li",{parentName:"ul"},"base58.decode"),Object(i.b)("li",{parentName:"ul"},"isBase58"),Object(i.b)("li",{parentName:"ul"},"bech32 encode decode"),Object(i.b)("li",{parentName:"ul"},"fromBech32Address toBech32Address")),Object(i.b)("h2",{id:"demo"},"Demo"),Object(i.b)("h3",{id:"generate-large-amount-of-addresses"},"Generate Large Amount of Addresses"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'\npackage com.firestack.example;\n\nimport com.firestack.laksaj.crypto.KeyTools;\nimport com.firestack.laksaj.utils.ByteUtil;\nimport org.web3j.crypto.ECKeyPair;\n\nimport java.math.BigInteger;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\n\npublic class GenerateAddress {\n    //How to generate large amount of addresses\n    public static void main(String[] args) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {\n        int n = 0;\n        while (n < 100) {\n            System.out.println("--------------------------");\n            System.out.println("generate nth keypair:");\n            ECKeyPair keyPair = KeyTools.generateKeyPair();\n            BigInteger privateInteger = keyPair.getPrivateKey();\n            BigInteger publicInteger = keyPair.getPublicKey();\n            System.out.println("private key is: " + privateInteger.toString(16));\n            System.out.println("public key is: " + publicInteger.toString(16));\n            System.out.println("address is: " + KeyTools.getAddressFromPublicKey(ByteUtil.byteArrayToHexString(publicInteger.toByteArray())));\n        }\n    }\n\n')),Object(i.b)("h3",{id:"validate-an-address"},"Validate an Address"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package com.firestack.example;\n\nimport com.firestack.laksaj.utils.Validation;\n\npublic class ValidateAddress {\n    public static void main(String[] args) {\n        String address = "2624B9EA4B1CD740630F6BF2FEA82AAC0067070B";\n        boolean isAddress = Validation.isAddress(address);\n        System.out.println("is address: " + isAddress);\n    }\n}\n')),Object(i.b)("h3",{id:"validate-checksum-address"},"Validate Checksum Address"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package com.firestack.example;\n\nimport com.firestack.laksaj.utils.Validation;\n\npublic class ValidChecksumAddress {\n    public static void main(String[] args) {\n        String checksumAddress = "0x4BAF5faDA8e5Db92C3d3242618c5B47133AE003C";\n        boolean isChecksumAddress = Validation.isValidChecksumAddress(checksumAddress);\n        System.out.println("is checksum address: " + isChecksumAddress);\n    }\n}\n')),Object(i.b)("h3",{id:"transaction-operations-construct-a-transaction-calculate-transaction-fee-do-serialization-sign-a-transaction-broadcast"},"Transaction Operations (Construct a Transaction, Calculate Transaction Fee, Do Serialization, Sign a Transaction, Broadcast)"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package com.firestack.example;\n\nimport com.firestack.laksaj.account.Wallet;\nimport com.firestack.laksaj.contract.Contract;\nimport com.firestack.laksaj.contract.ContractFactory;\nimport com.firestack.laksaj.contract.DeployParams;\nimport com.firestack.laksaj.contract.Value;\nimport com.firestack.laksaj.jsonrpc.HttpProvider;\nimport com.firestack.laksaj.transaction.Transaction;\nimport com.firestack.laksaj.transaction.TransactionFactory;\nimport javafx.util.Pair;\n\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.firestack.laksaj.account.Wallet.pack;\n\npublic class TransactionOperation {\n    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {\n        Wallet wallet = new Wallet();\n        String ptivateKey = "e19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930";\n        // Populate the wallet with an account\n        String address = wallet.addByPrivateKey(ptivateKey);\n        System.out.println("address is: " + address);\n\n        HttpProvider provider = new HttpProvider("https://api.zilliqa.com");\n        //get balance\n        HttpProvider.BalanceResult balanceResult = provider.getBalance(address);\n        System.out.println("balance is: " + balanceResult.getBalance());\n\n        //construct non-contract transaction\n        Transaction transaction = Transaction.builder()\n                .version(String.valueOf(pack(333, 1)))\n                .toAddr("zil16jrfrs8vfdtc74yzhyy83je4s4c5sqrcasjlc4")\n                .senderPubKey("0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a")\n                .amount("10000000")\n                .gasPrice("2000000000")\n                .gasLimit("50")\n                .code("")\n                .data("")\n                .provider(new HttpProvider("https://api.zilliqa.com/"))\n                .build();\n\n        //sign transaction\n        transaction = wallet.sign(transaction);\n        System.out.println("signature is: " + transaction.getSignature());\n\n        //broadcast transaction\n        HttpProvider.CreateTxResult result = TransactionFactory.sendTransaction(transaction);\n        System.out.println(result);\n\n        //hello-world contract\n        String code = "scilla_version 0\\n" +\n                "\\n" +\n                "    (* HelloWorld contract *)\\n" +\n                "\\n" +\n                "    import ListUtils\\n" +\n                "\\n" +\n                "    (***************************************************)\\n" +\n                "    (*               Associated library                *)\\n" +\n                "    (***************************************************)\\n" +\n                "    library HelloWorld\\n" +\n                "\\n" +\n                "    let one_msg =\\n" +\n                "      fun (msg : Message) =>\\n" +\n                "      let nil_msg = Nil {Message} in\\n" +\n                "      Cons {Message} msg nil_msg\\n" +\n                "\\n" +\n                "    let not_owner_code = Int32 1\\n" +\n                "    let set_hello_code = Int32 2\\n" +\n                "\\n" +\n                "    (***************************************************)\\n" +\n                "    (*             The contract definition             *)\\n" +\n                "    (***************************************************)\\n" +\n                "\\n" +\n                "    contract HelloWorld\\n" +\n                "    (owner: ByStr20)\\n" +\n                "\\n" +\n                "    field welcome_msg : String = \\"\\"\\n" +\n                "\\n" +\n                "    transition setHello (msg : String)\\n" +\n                "      is_owner = builtin eq owner _sender;\\n" +\n                "      match is_owner with\\n" +\n                "      | False =>\\n" +\n                "        msg = {_tag : \\"TransactionOperation\\"; _recipient : _sender; _amount : Uint128 0; code : not_owner_code};\\n" +\n                "        msgs = one_msg msg;\\n" +\n                "        send msgs\\n" +\n                "      | True =>\\n" +\n                "        welcome_msg := msg;\\n" +\n                "        msg = {_tag : \\"TransactionOperation\\"; _recipient : _sender; _amount : Uint128 0; code : set_hello_code};\\n" +\n                "        msgs = one_msg msg;\\n" +\n                "        send msgs\\n" +\n                "      end\\n" +\n                "    end\\n" +\n                "\\n" +\n                "\\n" +\n                "    transition getHello ()\\n" +\n                "        r <- welcome_msg;\\n" +\n                "        e = {_eventname: \\"getHello()\\"; msg: r};\\n" +\n                "        event e\\n" +\n                "    end";\n        List<Value> init = Arrays.asList(Value.builder().vname("_scilla_version").type("Uint32").value("0").build(), Value.builder().vname("owner").type("ByStr20").value("0x9bfec715a6bd658fcb62b0f8cc9bfa2ade71434a").build());\n\n        ContractFactory factory = ContractFactory.builder().provider(new HttpProvider("https://api.zilliqa.com/")).signer(wallet).build();\n        Contract contract = factory.newContract(code, (Value[]) init.toArray(), "");\n        DeployParams deployParams = DeployParams.builder().version(String.valueOf(pack(2, 8))).gasPrice("1000000000").gasLimit("10000").senderPubKey("0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a").build();\n\n        //deploy contract, this will take a while to track transaction util it has been confirmed or failed\n        Pair<Transaction, Contract> deployResult = contract.deploy(deployParams, 300, 3);\n        System.out.println("result is: " + deployResult);\n\n        //calculate transaction fee\n        String transactionFee = new BigInteger(deployResult.getKey().getReceipt().getCumulative_gas()).multiply(new BigInteger(deployResult.getKey().getGasPrice())).toString();\n        System.out.println("transaction fee is: " + transactionFee);\n    }\n}\n\n')),Object(i.b)("h3",{id:"know-a-smart-contract-deposit"},"Know a Smart Contract Deposit"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'\npackage com.firestack.example;\n\nimport com.firestack.laksaj.blockchain.Contract;\nimport com.firestack.laksaj.jsonrpc.HttpProvider;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class SmartContractDeposit {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        HttpProvider client = new HttpProvider("https://api.zilliqa.com/");\n        String lastEpoch = client.getNumTxnsTxEpoch();\n        List<Contract.State> lastStateList = client.getSmartContractState("D6606D02DFF929593312D8D0D36105E376F95AA0");\n\n        System.out.println("last epoch is " + lastEpoch);\n        System.out.println("last state:" + lastStateList);\n\n        int n = 0;\n\n        while (true) {\n            String epoch = client.getNumTxnsTxEpoch();\n            System.out.println(n + "th current epoch is: " + epoch);\n            if (!lastEpoch.equals(epoch)) {\n                System.out.println("epoch hash changed");\n                List<Contract.State> stateList = client.getSmartContractState("D6606D02DFF929593312D8D0D36105E376F95AA0");\n                System.out.println("last state: " + lastStateList);\n                System.out.println("current state: " + stateList);\n                lastEpoch = epoch;\n                lastStateList = stateList;\n            }\n            Thread.sleep(3000);\n            n += 1;\n        }\n    }\n}\n\n')))}d.isMDXComponent=!0},298:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),b=d(a),p=n,m=b["".concat(c,".").concat(p)]||b[p]||u[p]||i;return a?r.a.createElement(m,l(l({ref:t},s),{},{components:a})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<i;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);