(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{278:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var o=n(2),a=n(6),i=(n(0),n(298)),r={id:"exchange-ip-whitelisting",title:"IP Whitelisting",keywords:["exchanges","docker setup","zilliqa"],description:"Run seed node in IP Whitelisting mode."},c={id:"exchanges/exchange-ip-whitelisting",isDocsHomePage:!1,title:"IP Whitelisting",description:"Run seed node in IP Whitelisting mode.",source:"@site/docs/exchanges/exchange-ip-whitelisting.md",permalink:"/docs/exchanges/exchange-ip-whitelisting",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/exchanges/exchange-ip-whitelisting.md",sidebar:"ExchangesSidebar",previous:{title:"Hosting Seed Nodes",permalink:"/docs/exchanges/exchange-getting-started"},next:{title:"Key Whitelisting (option 1)",permalink:"/docs/exchanges/exchange-key-whitelisting-1"}},s=[{value:"Preparing the Machine",id:"preparing-the-machine",children:[{value:"Docker Setup",id:"docker-setup",children:[]},{value:"Native Setup",id:"native-setup",children:[]}]},{value:"Configuring the Node",id:"configuring-the-node",children:[]},{value:"Joining the Network",id:"joining-the-network",children:[]},{value:"Testing Your Seed Node&#39;s JSON-RPC Port",id:"testing-your-seed-nodes-json-rpc-port",children:[]},{value:"Testing Your Seed Node&#39;s WebSocket Port",id:"testing-your-seed-nodes-websocket-port",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In IP whitelisting mode, blockchain data is pushed directly to exchanges in periodic intervals.\nExchange IP addresses must be whitelisted by Zilliqa Research to receive these data broadcasts."),Object(i.b)("h2",{id:"preparing-the-machine"},"Preparing the Machine"),Object(i.b)("p",null,"Before you start, please ensure the steps below are done."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Choose and note down a port you wish to reserve for your seed node to receive incoming blockchain data."),Object(i.b)("li",{parentName:"ol"},"Share the static IP address and port of the node with the Zilliqa support team for whitelisting.\nThis step is critical, as failing to provide the correct IP and port will result in failure to receive blockchain data.")),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The port of choice must be opened to inbound connections. Otherwise, the seed node will be unreachable."))),Object(i.b)("h3",{id:"docker-setup"},"Docker Setup"),Object(i.b)("p",null,"We highly recommend using ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://docker.com"}),"Docker")," to set up a seed node,\nas we provide a tested, production-ready image for your use. If you have not\nyet set up docker, please follow the instructions on the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.docker.com/install/"}),"official documentation"),"."),Object(i.b)("p",null,"Once you have set up Docker, you may proceed to download the configuration\ntarball for the Mainnet:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"# create a directory\n$ mkdir my_seed && cd my_seed\n# download the seed node configuration files\n$ curl -O https://mainnet-join.zilliqa.com/seed-configuration.tar.gz\n$ tar -zxvf seed-configuration.tar.gz\n\n# Contents:\n#\n# launch.sh\n# constants.xml\n# launch_docker.sh\n# dsnodes.xml\n# config.xml\n")),Object(i.b)("h3",{id:"native-setup"},"Native Setup"),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This approach has been tested on ",Object(i.b)("strong",{parentName:"p"},"Ubuntu 18.04")," and involves compiling\nC++. We strongly recommend you consider using the Docker image provided above."))),Object(i.b)("p",null,"If you cannot or do not wish to use Docker, you may also build the Zilliqa\nbinary from source and run it as such."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),'# clone Zilliqa source files\n$ git clone https://github.com/Zilliqa/Zilliqa.git && cd Zilliqa && git checkout\ntags/<tag_id>\n\n# install system dependencies\n$ sudo apt-get update && sudo apt-get install \\\n    git \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-test-dev \\\n    libssl-dev \\\n    libleveldb-dev \\\n    libjsoncpp-dev \\\n    libsnappy-dev \\\n    cmake \\\n    libmicrohttpd-dev \\\n    libjsonrpccpp-dev \\\n    build-essential \\\n    pkg-config \\\n    libevent-dev \\\n    libminiupnpc-dev \\\n    libcurl4-openssl-dev \\\n    libboost-program-options-dev \\\n    libboost-python-dev \\\n    python3-dev         \\\n    python3-setuptools  \\\n    python3-pip         \\\n    gawk\n\n# Run the following to install latest version of cmake.\n# We suggest to install cmake 3.19 or any version >=3.16:\nwget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh\nmkdir -p "${HOME}"/.local\nbash ./cmake-3.19.3-Linux-x86_64.sh --skip-license --prefix="${HOME}"/.local/\nexport PATH=$HOME/.local/bin:$PATH\ncmake --version\nrm cmake-3.19.3-Linux-x86_64.sh\n\n$ export LC_ALL=C\n$ pip3 install requests clint futures\n\n# build the binary. this may take a while.\n$ ./build.sh\n')),Object(i.b)("p",null,"The build should exit with no errors. Once it is complete, download the\nconfiguration tarball:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"# make a separate folder for keys and configuration\n$ cd ../ && mkdir my_seed && cd my_seed\n# download the seed node configuration files\n$ curl -O https://mainnet-join.zilliqa.com/seed-configuration.tar.gz\n$ tar -zxvf seed-configuration.tar.gz\n\n# Contents:\n#\n# launch.sh\n# constants.xml\n# launch_docker.sh\n# dsnodes.xml\n# config.xml\n")),Object(i.b)("h2",{id:"configuring-the-node"},"Configuring the Node"),Object(i.b)("p",null,"The node requires some configuration before it can successfully join the\nnetwork. Most configuration is contained in ",Object(i.b)("inlineCode",{parentName:"p"},"constants.xml"),", which should be\nin the directory we extracted ",Object(i.b)("inlineCode",{parentName:"p"},"seed-configuration.tar.gz")," to. Minimally, the\nfollowing changes are required:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Change the value of ",Object(i.b)("inlineCode",{parentName:"li"},"ENABLE_WEBSOCKET")," to ",Object(i.b)("inlineCode",{parentName:"li"},"true")," if your seed node will support\nwebsockets (refer to the ",Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/Zilliqa/dev-portal/tree/master/docs/api-websocket.md"}),"Zilliqa Websocket Server")," documentation).")),Object(i.b)("h2",{id:"joining-the-network"},"Joining the Network"),Object(i.b)("p",null,"Once the preliminary steps have been completed, joining the network is relatively\nstraightforward."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"# NOTE: run only ONE of the following.\n# for Docker setup\n$ ./launch_docker.sh\n# for native setup\n$ ./launch.sh\n")),Object(i.b)("p",null,"You will be asked a series of questions. When asked to enter your IP address\nand listening port. This is crucial, as your node ",Object(i.b)("strong",{parentName:"p"},"will not work")," with anything\nelse."),Object(i.b)("p",null,"Sample instructions to be followed for launch are provided below."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"launch_docker.sh")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ ./launch_docker.sh\nAssign a name to your container (default: zilliqa): <container_name>\nEnter your IP address ('NAT' or *.*.*.*): <static ip address>\nEnter your listening port (default: 33133): <33133 or other selected port>\nUse IP whitelisting registration approach (default: Y): Y\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"launch.sh")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ ./launch.sh\nEnter the full path of your zilliqa source code directory: <zilliqa code directory path>\nEnter the full path for persistence storage (default: current working directory): <default or custom path>\nEnter your IP address ('NAT' or *.*.*.*): <static ip address>\nEnter your listening port (default: 33133): <33133 or other selected port>\nUse IP whitelisting registration approach (default: Y): Y\n")),Object(i.b)("h2",{id:"testing-your-seed-nodes-json-rpc-port"},"Testing Your Seed Node's JSON-RPC Port"),Object(i.b)("p",null,"To check whether your node's JSON-RPC server is publicly available, you can use the following curl command."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),'curl -d \'{\n    "id": "1",\n    "jsonrpc": "2.0",\n    "method": "GetBlockchainInfo",\n    "params": [""]\n}\' -H "Content-Type: application/json" -X POST "<seed node address>"\n')),Object(i.b)("p",null,"If you received the latest blockchain information (similar to the one below) from the seed node, your JSON-RPC service is running well."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),'{"id":"1","jsonrpc":"2.0","result":{"CurrentDSEpoch":"4789","CurrentMiniEpoch":"478809","DSBlockRate":0.00013455546527607284,"NumDSBlocks":"4790","NumPeers":2400,"NumTransactions":"3091806","NumTxBlocks":"478809","NumTxnsDSEpoch":"185","NumTxnsTxEpoch":"0","ShardingStructure":{"NumPeers":[600,600,600]},"TransactionRate":0,"TxBlockRate":0.013450003515398927}}\n')),Object(i.b)("h2",{id:"testing-your-seed-nodes-websocket-port"},"Testing Your Seed Node's WebSocket Port"),Object(i.b)("p",null,"You can use an online WebSocket test utility to test whether your WebSocket is publicly accessible."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Visit ",Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://www.websocket.org/echo.html"}),"https://www.websocket.org/echo.html")),Object(i.b)("li",{parentName:"ol"},"Under location, put your WebSocket URL link (e.g., ",Object(i.b)("inlineCode",{parentName:"li"},"wss://<yourdomain here or ip:port>"),")"),Object(i.b)("li",{parentName:"ol"},"Click on connect"),Object(i.b)("li",{parentName:"ol"},"If ",Object(i.b)("strong",{parentName:"li"},"\u201cCONNECTED\u201d")," is shown in the log, your WebSocket port is publicly accessible")),Object(i.b)("h2",{id:"next-steps"},"Next Steps"),Object(i.b)("p",null,"If you have successfully completed the above steps, you should have\na functioning seed node that exposes an RPC API on ",Object(i.b)("inlineCode",{parentName:"p"},"localhost:4201"),". You may\nfurther check the logs at ",Object(i.b)("inlineCode",{parentName:"p"},"zilliqa-00001-log.txt"),"."),Object(i.b)("p",null,"The following articles in this series will demonstrate a simple set of\nfunctions that can be used as a starting point for exchange developers to implement\ntheir own custom business logic around the Zilliqa blockchain. You may find\nthe full source code of the example app in the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/Zilliqa/dev-portal/tree/master/examples/exchange"}),"same repository"),"."))}d.isMDXComponent=!0},298:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=o,h=p["".concat(r,".").concat(b)]||p[b]||u[b]||i;return n?a.a.createElement(h,c(c({ref:t},l),{},{components:n})):a.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var l=2;l<i;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);