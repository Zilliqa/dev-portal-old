(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{159:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return m}));var a=t(2),i=t(6),r=(t(0),t(296)),o={id:"exchange-account-management",title:"Account Management",keywords:["generating account","exporting account","importing account","zilliqa"],description:"Exchange Account Management"},c={id:"exchanges/exchange-account-management",isDocsHomePage:!1,title:"Account Management",description:"Exchange Account Management",source:"@site/docs/exchanges/exchange-account-management.md",permalink:"/docs/exchanges/exchange-account-management",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/exchanges/exchange-account-management.md",sidebar:"ExchangesSidebar",previous:{title:"Key Whitelisting (option 2)",permalink:"/docs/exchanges/exchange-key-whitelisting-2"},next:{title:"Sending Transactions",permalink:"/docs/exchanges/exchange-sending-transactions"}},s=[{value:"Generating Numerous Accounts",id:"generating-numerous-accounts",children:[]},{value:"Exporting an Account",id:"exporting-an-account",children:[]},{value:"Importing an Account",id:"importing-an-account",children:[]}],l={rightToc:s};function m(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("hr",null),Object(r.b)("h2",{id:"generating-numerous-accounts"},"Generating Numerous Accounts"),Object(r.b)("p",null,"A common task for exchanges is to safely and predictably generate a large\nnumber of addresses. You can do so using one or more ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"}),"BIP39 mnemonics"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class ZilliqaService {\n  accounts: string[] = [];\n  zil: Zilliqa;\n\n  constructor(api: string, mnemonics: { [mnemonic: string]: number }) {\n    const zilliqa = new Zilliqa(api);\n    this.zil = zilliqa;\n\n    // you can use one or more mnemonics to manage/generate a large number of accounts\n    for (let m in mnemonics) {\n      const num = mnemonics[m];\n      range(num).forEach((i) => {\n        const address = this.zil.wallet.addByMnemonic(m, i);\n        this.accounts.push(address);\n      });\n    }\n  }\n\n  /* truncated */\n}\n")),Object(r.b)("h2",{id:"exporting-an-account"},"Exporting an Account"),Object(r.b)("p",null,"You may also wish to export a keypair to a portable format to use it somewhere else.\nWe support a modified implementation of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition"}),"Web3 Secret Storage Definition"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { Zilliqa } from '@zilliqa-js/zilliqa';\nimport * fs from 'fs';\n\nexport class ZilliqaService {\n  accounts: string[] = [];\n  zil: Zilliqa;\n\n  constructor(api: string, mnemonics: {[mnemonic: string]: number}) {\n    const zilliqa = new Zilliqa(api);\n    this.zil = zilliqa;\n\n    // you can use one or more mnemonics to manage/generate a large number of accounts\n    for (let m in mnemonics) {\n      const num = mnemonics[m];\n      range(num).forEach(i => {\n        const address = this.zil.wallet.addByMnemonic(m, i);\n        this.accounts.push(address);\n      });\n    }\n  }\n\n  /* truncated */\n\n  export(address: string) {\n    // keep this secret.\n    const passphrase = 'something';\n    const json = this.zil.wallet.export(address, passphrase);\n    // at this point, you should safely write this to disk, or send it to\n    // a vault somehwere. the point is to keep it safe.\n    fs.writeFile('/path/to/safe/place', json);\n  }\n\n  /* truncated */\n}\n")),Object(r.b)("p",null,"Now, you should be able to find your file containing your passphrase-encrypted\nprivate key at the path you specified. Remember to always keep this file, and\nespecially your passphrase, secret!"),Object(r.b)("h2",{id:"importing-an-account"},"Importing an Account"),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Ethereum's implementation differs from Zilliqa's. You will ",Object(r.b)("strong",{parentName:"p"},"not")," be able to decrypt a Zilliqa keystore file using web3 and vice-versa."))),Object(r.b)("p",null,"At some stage, you may also need to import a keystore file you had previously\nexported. There is a convenient facility for that."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import pify from 'pify';\nimport { Zilliqa } from '@zilliqa-js/zilliqa';\nimport * fs from 'fs';\n\nexport class ZilliqaService {\n  accounts: string[] = [];\n  zil: Zilliqa;\n\n  constructor(api: string, mnemonics: {[mnemonic: string]: number}) {\n    const zilliqa = new Zilliqa(api);\n    this.zil = zilliqa;\n\n    // you can use one or more mnemonics to manage/generate a large number of accounts\n    for (let m in mnemonics) {\n      const num = mnemonics[m];\n      range(num).forEach(i => {\n        const address = this.zil.wallet.addByMnemonic(m, i);\n        this.accounts.push(address);\n      });\n    }\n  }\n\n  /* truncated */\n\n  export(address: string) {\n    // keep this secret.\n    const passphrase = 'something';\n    const json = this.zil.wallet.export(address, passphrase);\n    // at this point, you should safely write this to disk, or send it to\n    // a vault somehwere. the point is to keep it safe.\n    fs.writeFile('/path/to/safe/place', json);\n  }\n\n  async addKeystoreFile(path: string, passphrase: string) {\n    const buf = await pify(fs.readFile)(path);\n    const json = buf.toString();\n    const address = await this.zil.wallet.addByKeystore(json, passphrase);\n\n    return address;\n  }\n\n  /* truncated */\n")),Object(r.b)("p",null,"These two methods allow you to securely serialise and deserialise your\naccounts."))}m.isMDXComponent=!0},296:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),m=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=m(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(t),d=a,b=p["".concat(o,".").concat(d)]||p[d]||u[d]||r;return t?i.a.createElement(b,c(c({ref:n},l),{},{components:t})):i.a.createElement(b,c({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=t[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);