(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{116:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return d}));var r=t(2),a=t(6),o=(t(0),t(295)),s={id:"rosetta-data-network-options",title:"Options",keywords:["rosetta","middleware","exchanges","zilliqa","API","data","network","options"],description:"Options"},i={id:"exchanges/rosetta-data-network-options",isDocsHomePage:!1,title:"Options",description:"Options",source:"@site/docs/exchanges/rosetta-data-network-options.md",permalink:"/docs/exchanges/rosetta-data-network-options",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/exchanges/rosetta-data-network-options.md",sidebar:"ExchangesSidebar",previous:{title:"List",permalink:"/docs/exchanges/rosetta-data-network-list"},next:{title:"Status",permalink:"/docs/exchanges/rosetta-data-network-status"}},l=[{value:"Get Network Options",id:"get-network-options",children:[]}],c={rightToc:l};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("hr",null),Object(o.b)("h2",{id:"get-network-options"},"Get Network Options"),Object(o.b)("p",null,"Returns the\n1) Version information of Zilliqa Rosetta and Zilliqa seed node.\n2) Type of network operation supported by Zilliqa Rosetta\n3) List of errors code in Zilliqa Rosetta"),Object(o.b)("p",null,"Request:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "network_identifier": {\n        "blockchain": "zilliqa",\n        "network": "testnet"\n    },\n    "metadata": {}\n}\n')),Object(o.b)("p",null,"Response:"),Object(o.b)("p",null,"Sample"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "version": {\n        "rosetta_version": "1.4.9",\n        "node_version": "v6.3.0-alpha.0"\n    },\n    "allow": {\n        "operation_statuses": [\n            {\n                "status": "SUCCESS",\n                "successful": true\n            },\n            {\n                "status": "FAILED",\n                "successful": false\n            }\n        ],\n        "operation_types": [\n            "transfer",\n            "contract_deployment",\n            "contract_call",\n            "contract_call_transfer"\n        ],\n        "errors": [\n            {\n                "code": 400,\n                "message": "network identifier is not supported",\n                "retriable": false\n            },\n            {\n                "code": 401,\n                "message": "block identifier is empty",\n                "retriable": false\n            },\n            {\n                "code": 402,\n                "message": "block index is invalid",\n                "retriable": false\n            },\n            {\n                "code": 403,\n                "message": "get block failed",\n                "retriable": true\n            },\n            {\n                "code": 404,\n                "message": "block hash is invalid",\n                "retriable": false\n            },\n            {\n                "code": 405,\n                "message": "get transaction failed",\n                "retriable": true\n            },\n            {\n                "code": 406,\n                "message": "signed transaction failed",\n                "retriable": false\n            },\n            {\n                "code": 407,\n                "message": "commit transaction failed",\n                "retriable": false\n            },\n            {\n                "code": 408,\n                "message": "transaction hash is invalid",\n                "retriable": false\n            },\n            {\n                "code": 409,\n                "message": "block is not exist",\n                "retriable": false\n            },\n            {\n                "code": 500,\n                "message": "services not realize",\n                "retriable": false\n            },\n            {\n                "code": 501,\n                "message": "address is invalid",\n                "retriable": true\n            },\n            {\n                "code": 502,\n                "message": "get balance error",\n                "retriable": true\n            },\n            {\n                "code": 503,\n                "message": "parse integer error",\n                "retriable": true\n            },\n            {\n                "code": 504,\n                "message": "json marshal failed",\n                "retriable": false\n            },\n            {\n                "code": 505,\n                "message": "parse tx payload failed",\n                "retriable": false\n            },\n            {\n                "code": 506,\n                "message": "currency not config",\n                "retriable": false\n            },\n            {\n                "code": 507,\n                "message": "params error",\n                "retriable": true\n            },\n            {\n                "code": 508,\n                "message": "contract address invalid",\n                "retriable": true\n            },\n            {\n                "code": 509,\n                "message": "pre execute contract failed",\n                "retriable": false\n            },\n            {\n                "code": 510,\n                "message": "query balance failed",\n                "retriable": true\n            },\n            {\n                "code": 511,\n                "message": "tx not exist in mem pool",\n                "retriable": false\n            },\n            {\n                "code": 512,\n                "message": "historical compute balance height less than req height",\n                "retriable": false\n            },\n            {\n                "code": 513,\n                "message": "db store error",\n                "retriable": true\n            },\n            {\n                "code": 514,\n                "message": "public hex error",\n                "retriable": false\n            },\n            {\n                "code": 515,\n                "message": "unsupported address format",\n                "retriable": false\n            },\n            {\n                "code": 516,\n                "message": "signature provided in transaction is invalid",\n                "retriable": false\n            }\n        ],\n        "historical_balance_lookup": false\n    }\n}\n')))}d.isMDXComponent=!0},295:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),b=r,f=p["".concat(s,".").concat(b)]||p[b]||u[b]||o;return t?a.a.createElement(f,i(i({ref:n},c),{},{components:t})):a.a.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);