(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{164:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),i=(n(0),n(295)),c={id:"basics-zil-contract",title:"Smart Contract Layer",keywords:["scilla","smart contract","pbft","zilliqa","scilla interpreter"],description:"Zilliqa Smart Contracts"},o={id:"basics/basics-zil-contract",isDocsHomePage:!1,title:"Smart Contract Layer",description:"Zilliqa Smart Contracts",source:"@site/docs/basics/basics-zil-contract.md",permalink:"/docs/basics/basics-zil-contract",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/basics/basics-zil-contract.md",sidebar:"BasicsSideBar",previous:{title:"Reward Mechanism",permalink:"/docs/basics/basics-zil-reward"},next:{title:"Gas Accounting",permalink:"/docs/basics/basics-zil-gas"}},l=[{value:"Scilla Interpreter",id:"scilla-interpreter",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("hr",null),Object(i.b)("p",null,"Zilliqa comes with its own smart contract language called Scilla. Scilla short\nfor Smart Contract Intermediate Level Language is designed as a principled\nlanguage with smart contract safety in mind."),Object(i.b)("p",null,"Scilla imposes a structure on smart contracts that makes applications less\nvulnerable to attacks by eliminating certain known vulnerabilities directly at\nthe language-level. Furthermore, the principled structure of Scilla makes\napplications inherently more secure and amenable to formal verification."),Object(i.b)("p",null,"Some of the design choices in Scilla include:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Separation Between Computation and Communication:")," Contracts in Scilla\nare structured as communicating automata: every in-contract computation\n(e.g., changing its balance or computing a value of a function) is implemented\nas a standalone, atomic transition, i.e., without involving any other parties.\nWhenever such involvement is required (e.g., for transferring control to\nanother party), a transition would end, with an explicit communication, by\nmeans of sending and receiving messages.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Separation Between Effectful and Pure Computations:")," Any in-contract\ncomputation happening within a transition has to terminate, and have a\npredictable effect on the state of the contract and the execution. In order to\nachieve this, Scilla draws inspiration from functional programming with effects\nin distinguishing between pure expressions (e.g., expressions with primitive\ndata types and maps), impure local state manipulations (i.e., reading/writing\ninto contract fields), and blockchain reflection (e.g., reading current block\nnumber). "))),Object(i.b)("h2",{id:"scilla-interpreter"},"Scilla Interpreter"),Object(i.b)("p",null,"Scilla currently comes with an ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/zilliqa/scilla"}),"interpreter"),"\nwritten in OCaml. The interpreter provides a calling interface that enables\nusers to invoke transitions with specified inputs and obtain outputs. Execution\nof a transition with supplied inputs will result in a set of outputs, and a\nchange in the smart contract mutable state."),Object(i.b)("p",null,"More details on the interpreter are available in ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://scilla.readthedocs.io/en/latest/interface.html"}),"Scilla\nDocs"),"."))}p.isMDXComponent=!0},295:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,d=u["".concat(c,".").concat(b)]||u[b]||m[b]||i;return n?a.a.createElement(d,o(o({ref:t},s),{},{components:n})):a.a.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);