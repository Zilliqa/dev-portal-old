(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{120:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(6),o=(n(0),n(295)),r={id:"exchange-key-whitelisting-1",title:"Key Whitelisting (option 1)",keywords:["exchanges","docker setup","zilliqa"],description:"Run seed node in key Whitelisting mode (with open inbound port)"},c={id:"exchanges/exchange-key-whitelisting-1",isDocsHomePage:!1,title:"Key Whitelisting (option 1)",description:"Run seed node in key Whitelisting mode (with open inbound port)",source:"@site/docs/exchanges/exchange-key-whitelisting-1.md",permalink:"/docs/exchanges/exchange-key-whitelisting-1",editUrl:"https://github.com/Zilliqa/dev-portal/tree/master/docs/exchanges/exchange-key-whitelisting-1.md",sidebar:"ExchangesSidebar",previous:{title:"IP Whitelisting",permalink:"/docs/exchanges/exchange-ip-whitelisting"},next:{title:"Key Whitelisting (option 2)",permalink:"/docs/exchanges/exchange-key-whitelisting-2"}},s=[{value:"Preparing the Machine",id:"preparing-the-machine",children:[{value:"Docker Setup",id:"docker-setup",children:[]},{value:"Native Setup",id:"native-setup",children:[]}]},{value:"Configuring the Node",id:"configuring-the-node",children:[]},{value:"Joining the Network",id:"joining-the-network",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In key whitelisting mode, blockchain data is pulled by the seed from Zilliqa Research-hosted public seed nodes in periodic intervals.\nExchanges using this mode generate a public-private key pair and share their public key with Zilliqa Research for whitelisting."),Object(o.b)("p",null,"This section describes Option 1 for key whitelisting mode, which uses ",Object(o.b)("inlineCode",{parentName:"p"},"seed-configuration.tar.gz")," and requires opening an inbound port."),Object(o.b)("h2",{id:"preparing-the-machine"},"Preparing the Machine"),Object(o.b)("p",null,"Before you start, please ensure the steps below are done."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Choose and note down a port you wish to reserve for your seed node to receive incoming blockchain data.")),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The port of choice must be opened to inbound connections. Otherwise, the seed node will be unreachable."))),Object(o.b)("h3",{id:"docker-setup"},"Docker Setup"),Object(o.b)("p",null,"We highly recommend using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docker.com"}),"Docker")," to set up a seed node,\nas we provide a tested, production-ready image for your use. If you have not\nyet set up docker, please follow the instructions on the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.docker.com/install/"}),"official documentation"),"."),Object(o.b)("p",null,"Once you have set up Docker, you may proceed to download the configuration\ntarball for the Mainnet:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# create a directory\n$ mkdir my_seed && cd my_seed\n# download the seed node configuration files\n$ curl -O https://mainnet-join.zilliqa.com/seed-configuration.tar.gz\n$ tar -zxvf seed-configuration.tar.gz\n\n# Contents:\n#\n# launch.sh\n# constants.xml\n# launch_docker.sh\n# dsnodes.xml\n# config.xml\n")),Object(o.b)("p",null,"Once you have successfully uncompressed the tarball, you should generate a new keypair for whitelisting by Zilliqa Research:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ sudo docker run --rm zilliqa/zilliqa:<version> -c genkeypair\n# for example: sudo docker run --rm zilliqa/zilliqa:v7.2.0 -c genkeypair\n# output will be <public key> <private key>\n")),Object(o.b)("p",null,"The first value from the ouput is the public key and second value is the private key.\nThe public key has to be shared in advance while submitting the KYC form.\nThe private key is required to start the seed node."),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Any number of seed nodes can use this key pair simultaneously.\nHence, you only need to provide one key for whitelisting no matter how many seed nodes you will be operating."))),Object(o.b)("h3",{id:"native-setup"},"Native Setup"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This approach has been tested on ",Object(o.b)("strong",{parentName:"p"},"Ubuntu 18.04")," and involves compiling\nC++. We strongly recommend you consider using the Docker image provided above."))),Object(o.b)("p",null,"If you cannot or do not wish to use Docker, you may also build the Zilliqa\nbinary from source and run it as such."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),'# clone Zilliqa source files\n$ git clone https://github.com/Zilliqa/Zilliqa.git && cd Zilliqa && git checkout\ntags/<tag_id>\n\n# install system dependencies\n$ sudo apt-get update && sudo apt-get install \\\n    git \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-test-dev \\\n    libssl-dev \\\n    libleveldb-dev \\\n    libjsoncpp-dev \\\n    libsnappy-dev \\\n    cmake \\\n    libmicrohttpd-dev \\\n    libjsonrpccpp-dev \\\n    build-essential \\\n    pkg-config \\\n    libevent-dev \\\n    libminiupnpc-dev \\\n    libcurl4-openssl-dev \\\n    libboost-program-options-dev \\\n    libboost-python-dev \\\n    python3-dev         \\\n    python3-setuptools  \\\n    python3-pip         \\\n    gawk\n\n# Run the following to install latest version of cmake.\n# We suggest to install cmake 3.19 or any version >=3.16:\nwget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh\nmkdir -p "${HOME}"/.local\nbash ./cmake-3.19.3-Linux-x86_64.sh --skip-license --prefix="${HOME}"/.local/\nexport PATH=$HOME/.local/bin:$PATH\ncmake --version\nrm cmake-3.19.3-Linux-x86_64.sh\n\n$ export LC_ALL=C\n$ pip3 install requests clint futures\n\n# build the binary. this may take a while.\n$ ./build.sh\n')),Object(o.b)("p",null,"The build should exit with no errors. Once it is complete, download the\nconfiguration tarball, and generate a keypair:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# make a separate folder for keys and configuration\n$ cd ../ && mkdir my_seed && cd my_seed\n# download the seed node configuration files\n$ curl -O https://mainnet-join.zilliqa.com/seed-configuration.tar.gz\n$ tar -zxvf seed-configuration.tar.gz\n\n# Contents:\n#\n# launch.sh\n# constants.xml\n# launch_docker.sh\n# dsnodes.xml\n# config.xml\n\n# generate a key pair for key whitelisting\n$ ../Zilliqa/build/bin/genkeypair\n# output will be <public key> <private key>\n")),Object(o.b)("h2",{id:"configuring-the-node"},"Configuring the Node"),Object(o.b)("p",null,"The node requires some configuration before it can successfully join the\nnetwork. Most configuration is contained in ",Object(o.b)("inlineCode",{parentName:"p"},"constants.xml"),", which should be\nin the directory we extracted ",Object(o.b)("inlineCode",{parentName:"p"},"seed-configuration.tar.gz")," to. Minimally, the\nfollowing changes are required:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Change the value of ",Object(o.b)("inlineCode",{parentName:"li"},"ENABLE_WEBSOCKET")," to ",Object(o.b)("inlineCode",{parentName:"li"},"true")," if your seed node will support\nwebsockets (refer to the ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Zilliqa/dev-portal/tree/master/docs/api-websocket.md"}),"Zilliqa Websocket Server")," documentation).")),Object(o.b)("h2",{id:"joining-the-network"},"Joining the Network"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Before proceeding with this step, make sure you have completed the necessary KYC (for individual)."))),Object(o.b)("p",null,"Once the preliminary steps have been completed, joining the network is relatively\nstraightforward."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# NOTE: run only ONE of the following.\n# for Docker setup\n$ ./launch_docker.sh\n# for native setup\n$ ./launch.sh\n")),Object(o.b)("p",null,"You will be asked a series of questions.\nWhen asked to enter your listening port, please enter the value you noted down earlier.\nWhen asked to enter the private key, please enter the value you provided us when you submitted\nthe KYC form. This is crucial, as your node ",Object(o.b)("strong",{parentName:"p"},"will not work")," with anything else."),Object(o.b)("p",null,"Sample instructions to be followed for launch are provided below."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"launch_docker.sh")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ ./launch_docker.sh\nAssign a name to your container (default: zilliqa): <container_name>\nEnter your IP address ('NAT' or *.*.*.*): <static ip address of machine>\nEnter your listening port (default: 33133): <33133 or other selected port>\nUse IP whitelisting registration approach (default: Y): N\nEnter the private key (32-byte hex string) to be used by this node and whitelisted by upper seeds: <private key generated for key whitelisting>\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"launch.sh")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ ./launch.sh\nEnter the full path of your zilliqa source code directory: <zilliqa code directory path>\nEnter the full path for persistence storage (default: current working directory): <default or custom path>\nEnter your IP address ('NAT' or *.*.*.*): <static ip address>\nEnter your listening port (default: 33133): <33133 or other selected port>\nUse IP whitelisting registration approach (default: Y): N\nEnter the private key (32-byte hex string) to be used by this node and whitelisted by upper seeds: <private key generated for key whitelisting>\n")),Object(o.b)("h2",{id:"next-steps"},"Next Steps"),Object(o.b)("p",null,"If you have successfully completed the above steps, you should have\na functioning seed node that exposes an RPC API on ",Object(o.b)("inlineCode",{parentName:"p"},"localhost:4201"),". You may\nfurther check the logs at ",Object(o.b)("inlineCode",{parentName:"p"},"zilliqa-00001-log.txt"),"."),Object(o.b)("p",null,"The following articles in this series will demonstrate a simple set of\nfunctions that can be used as a starting point for exchange developers to implement\ntheir own custom business logic around the Zilliqa blockchain. You may find\nthe full source code of the example app in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Zilliqa/dev-portal/tree/master/examples/exchange"}),"same repository"),"."))}d.isMDXComponent=!0},295:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,h=p["".concat(r,".").concat(u)]||p[u]||b[u]||o;return n?i.a.createElement(h,c(c({ref:t},l),{},{components:n})):i.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);